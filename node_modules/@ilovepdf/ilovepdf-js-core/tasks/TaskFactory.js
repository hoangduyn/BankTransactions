"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const MergeTask_1 = __importDefault(require("./MergeTask"));
const TaskTypeNotExistsError_1 = __importDefault(require("../errors/TaskTypeNotExistsError"));
const SplitTask_1 = __importDefault(require("./SplitTask"));
const CompressTask_1 = __importDefault(require("./CompressTask"));
const WatermarkTask_1 = __importDefault(require("./WatermarkTask"));
const ValidatePdfaTask_1 = __importDefault(require("./ValidatePdfaTask"));
const ProtectTask_1 = __importDefault(require("./ProtectTask"));
const PdfJpgTask_1 = __importDefault(require("./PdfJpgTask"));
const PdfaTask_1 = __importDefault(require("./PdfaTask"));
const PageNumberTask_1 = __importDefault(require("./PageNumberTask"));
const ImagePdfTask_1 = __importDefault(require("./ImagePdfTask"));
const UnlockTask_1 = __importDefault(require("./UnlockTask"));
const RotateTask_1 = __importDefault(require("./RotateTask"));
const RepairTask_1 = __importDefault(require("./RepairTask"));
const OfficePdfTask_1 = __importDefault(require("./OfficePdfTask"));
const HtmlPdfTask_1 = __importDefault(require("./HtmlPdfTask"));
const ExtractTask_1 = __importDefault(require("./ExtractTask"));
const SignTask_1 = __importDefault(require("./sign/SignTask"));
const EditTask_1 = __importDefault(require("./edit/EditTask"));
class TaskFactory {
    /**
     * Factory method to create a task with the correct params.
     * @param taskType - Task type that will use a specific ILovePDF tool.
     * @param params - Parameters to customize the process.
     */
    newTask(taskType, auth, xhr, params = {}) {
        if (taskType === 'merge') {
            return new MergeTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'split') {
            return new SplitTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'compress') {
            return new CompressTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'extract') {
            return new ExtractTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'htmlpdf') {
            return new HtmlPdfTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'imagepdf') {
            return new ImagePdfTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'officepdf') {
            return new OfficePdfTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'pagenumber') {
            return new PageNumberTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'pdfa') {
            return new PdfaTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'pdfjpg') {
            return new PdfJpgTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'protect') {
            return new ProtectTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'repair') {
            return new RepairTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'rotate') {
            return new RotateTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'unlock') {
            return new UnlockTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'validatepdfa') {
            return new ValidatePdfaTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'watermark') {
            return new WatermarkTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'sign') {
            return new SignTask_1.default(auth, xhr, params);
        }
        else if (taskType === 'editpdf') {
            return new EditTask_1.default(auth, xhr, params);
        }
        // Don't return and throw an error.
        throw new TaskTypeNotExistsError_1.default();
    }
}
exports.default = TaskFactory;
//# sourceMappingURL=TaskFactory.js.map